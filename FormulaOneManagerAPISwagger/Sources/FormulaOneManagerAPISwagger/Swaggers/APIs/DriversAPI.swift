//
// DriversAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DriversAPI {
    /**

     - parameter _id: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiDriversDetailedDriverGet(_id: Int? = nil, completion: @escaping ((_ data: Driver?,_ error: Error?) -> Void)) {
        apiDriversDetailedDriverGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/Drivers/DetailedDriver
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "lastName" : "lastName",
  "growthPotentialId" : 8,
  "isReserveDriver" : true,
  "rating" : 7,
  "accuracy" : 3,
  "growthPotential" : 7,
  "consistency" : 0,
  "personDataId" : 1,
  "id" : 0,
  "braking" : 6,
  "value" : 6,
  "worldChampionships" : 2,
  "image" : "image",
  "overtaking" : 6,
  "pace" : 6,
  "control" : 3,
  "team" : {
    "image" : "image",
    "technicalChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "aerodynamics" : 4,
      "durability" : 1,
      "rating" : 1,
      "maximumSpeed" : 7,
      "firstName" : "firstName",
      "personDataId" : 3,
      "teamId" : 2,
      "id" : 7,
      "value" : 9
    },
    "teamData" : {
      "worldChampionships" : 6,
      "polePositions" : 6,
      "firstTeamEntry" : 9,
      "profile" : "profile",
      "fullName" : "fullName",
      "powerUnit" : "powerUnit",
      "id" : 8,
      "chassis" : "chassis",
      "highestRaceFinish" : 3,
      "base" : "base"
    },
    "teamDataId" : 6,
    "name" : "name",
    "id" : 2,
    "drivers" : [ null, null ],
    "teamChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "leading" : 9,
      "rating" : 9,
      "firstName" : "firstName",
      "personDataId" : 7,
      "management" : 5,
      "teamId" : 1,
      "id" : 1,
      "strategy" : 4,
      "value" : 6
    },
    "teamColor" : "teamColor"
  },
  "adaptability" : 7,
  "aggression" : 3,
  "defendeing" : 0,
  "firstName" : "firstName",
  "personData" : {
    "country" : "country",
    "placeOfBirth" : "placeOfBirth",
    "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "biography" : "biography"
  },
  "raceNumber" : 1,
  "smoothness" : 7,
  "cornering" : 6,
  "teamId" : 5,
  "racecraft" : 4,
  "reactions" : 5,
  "aggressionId" : 3
}}]
     - parameter _id: (query)  (optional)

     - returns: RequestBuilder<Driver> 
     */
    open class func apiDriversDetailedDriverGetWithRequestBuilder(_id: Int? = nil) -> RequestBuilder<Driver> {
        let path = "/api/Drivers/DetailedDriver"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "id": _id?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Driver>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiDriversDriverWithTeamGet(_id: Int? = nil, completion: @escaping ((_ data: Driver?,_ error: Error?) -> Void)) {
        apiDriversDriverWithTeamGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/Drivers/DriverWithTeam
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "lastName" : "lastName",
  "growthPotentialId" : 8,
  "isReserveDriver" : true,
  "rating" : 7,
  "accuracy" : 3,
  "growthPotential" : 7,
  "consistency" : 0,
  "personDataId" : 1,
  "id" : 0,
  "braking" : 6,
  "value" : 6,
  "worldChampionships" : 2,
  "image" : "image",
  "overtaking" : 6,
  "pace" : 6,
  "control" : 3,
  "team" : {
    "image" : "image",
    "technicalChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "aerodynamics" : 4,
      "durability" : 1,
      "rating" : 1,
      "maximumSpeed" : 7,
      "firstName" : "firstName",
      "personDataId" : 3,
      "teamId" : 2,
      "id" : 7,
      "value" : 9
    },
    "teamData" : {
      "worldChampionships" : 6,
      "polePositions" : 6,
      "firstTeamEntry" : 9,
      "profile" : "profile",
      "fullName" : "fullName",
      "powerUnit" : "powerUnit",
      "id" : 8,
      "chassis" : "chassis",
      "highestRaceFinish" : 3,
      "base" : "base"
    },
    "teamDataId" : 6,
    "name" : "name",
    "id" : 2,
    "drivers" : [ null, null ],
    "teamChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "leading" : 9,
      "rating" : 9,
      "firstName" : "firstName",
      "personDataId" : 7,
      "management" : 5,
      "teamId" : 1,
      "id" : 1,
      "strategy" : 4,
      "value" : 6
    },
    "teamColor" : "teamColor"
  },
  "adaptability" : 7,
  "aggression" : 3,
  "defendeing" : 0,
  "firstName" : "firstName",
  "personData" : {
    "country" : "country",
    "placeOfBirth" : "placeOfBirth",
    "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "biography" : "biography"
  },
  "raceNumber" : 1,
  "smoothness" : 7,
  "cornering" : 6,
  "teamId" : 5,
  "racecraft" : 4,
  "reactions" : 5,
  "aggressionId" : 3
}}]
     - parameter _id: (query)  (optional)

     - returns: RequestBuilder<Driver> 
     */
    open class func apiDriversDriverWithTeamGetWithRequestBuilder(_id: Int? = nil) -> RequestBuilder<Driver> {
        let path = "/api/Drivers/DriverWithTeam"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "id": _id?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Driver>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiDriversDriversWithTeamGet(completion: @escaping ((_ data: [Driver]?,_ error: Error?) -> Void)) {
        apiDriversDriversWithTeamGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/Drivers/DriversWithTeam
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "lastName" : "lastName",
  "growthPotentialId" : 8,
  "isReserveDriver" : true,
  "rating" : 7,
  "accuracy" : 3,
  "growthPotential" : 7,
  "consistency" : 0,
  "personDataId" : 1,
  "id" : 0,
  "braking" : 6,
  "value" : 6,
  "worldChampionships" : 2,
  "image" : "image",
  "overtaking" : 6,
  "pace" : 6,
  "control" : 3,
  "team" : {
    "image" : "image",
    "technicalChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "aerodynamics" : 4,
      "durability" : 1,
      "rating" : 1,
      "maximumSpeed" : 7,
      "firstName" : "firstName",
      "personDataId" : 3,
      "teamId" : 2,
      "id" : 7,
      "value" : 9
    },
    "teamData" : {
      "worldChampionships" : 6,
      "polePositions" : 6,
      "firstTeamEntry" : 9,
      "profile" : "profile",
      "fullName" : "fullName",
      "powerUnit" : "powerUnit",
      "id" : 8,
      "chassis" : "chassis",
      "highestRaceFinish" : 3,
      "base" : "base"
    },
    "teamDataId" : 6,
    "name" : "name",
    "id" : 2,
    "drivers" : [ null, null ],
    "teamChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "leading" : 9,
      "rating" : 9,
      "firstName" : "firstName",
      "personDataId" : 7,
      "management" : 5,
      "teamId" : 1,
      "id" : 1,
      "strategy" : 4,
      "value" : 6
    },
    "teamColor" : "teamColor"
  },
  "adaptability" : 7,
  "aggression" : 3,
  "defendeing" : 0,
  "firstName" : "firstName",
  "personData" : {
    "country" : "country",
    "placeOfBirth" : "placeOfBirth",
    "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "biography" : "biography"
  },
  "raceNumber" : 1,
  "smoothness" : 7,
  "cornering" : 6,
  "teamId" : 5,
  "racecraft" : 4,
  "reactions" : 5,
  "aggressionId" : 3
}, {
  "lastName" : "lastName",
  "growthPotentialId" : 8,
  "isReserveDriver" : true,
  "rating" : 7,
  "accuracy" : 3,
  "growthPotential" : 7,
  "consistency" : 0,
  "personDataId" : 1,
  "id" : 0,
  "braking" : 6,
  "value" : 6,
  "worldChampionships" : 2,
  "image" : "image",
  "overtaking" : 6,
  "pace" : 6,
  "control" : 3,
  "team" : {
    "image" : "image",
    "technicalChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "aerodynamics" : 4,
      "durability" : 1,
      "rating" : 1,
      "maximumSpeed" : 7,
      "firstName" : "firstName",
      "personDataId" : 3,
      "teamId" : 2,
      "id" : 7,
      "value" : 9
    },
    "teamData" : {
      "worldChampionships" : 6,
      "polePositions" : 6,
      "firstTeamEntry" : 9,
      "profile" : "profile",
      "fullName" : "fullName",
      "powerUnit" : "powerUnit",
      "id" : 8,
      "chassis" : "chassis",
      "highestRaceFinish" : 3,
      "base" : "base"
    },
    "teamDataId" : 6,
    "name" : "name",
    "id" : 2,
    "drivers" : [ null, null ],
    "teamChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "leading" : 9,
      "rating" : 9,
      "firstName" : "firstName",
      "personDataId" : 7,
      "management" : 5,
      "teamId" : 1,
      "id" : 1,
      "strategy" : 4,
      "value" : 6
    },
    "teamColor" : "teamColor"
  },
  "adaptability" : 7,
  "aggression" : 3,
  "defendeing" : 0,
  "firstName" : "firstName",
  "personData" : {
    "country" : "country",
    "placeOfBirth" : "placeOfBirth",
    "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "biography" : "biography"
  },
  "raceNumber" : 1,
  "smoothness" : 7,
  "cornering" : 6,
  "teamId" : 5,
  "racecraft" : 4,
  "reactions" : 5,
  "aggressionId" : 3
} ]}]

     - returns: RequestBuilder<[Driver]> 
     */
    open class func apiDriversDriversWithTeamGetWithRequestBuilder() -> RequestBuilder<[Driver]> {
        let path = "/api/Drivers/DriversWithTeam"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Driver]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiDriversGet(completion: @escaping ((_ data: [Driver]?,_ error: Error?) -> Void)) {
        apiDriversGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/Drivers
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "lastName" : "lastName",
  "growthPotentialId" : 8,
  "isReserveDriver" : true,
  "rating" : 7,
  "accuracy" : 3,
  "growthPotential" : 7,
  "consistency" : 0,
  "personDataId" : 1,
  "id" : 0,
  "braking" : 6,
  "value" : 6,
  "worldChampionships" : 2,
  "image" : "image",
  "overtaking" : 6,
  "pace" : 6,
  "control" : 3,
  "team" : {
    "image" : "image",
    "technicalChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "aerodynamics" : 4,
      "durability" : 1,
      "rating" : 1,
      "maximumSpeed" : 7,
      "firstName" : "firstName",
      "personDataId" : 3,
      "teamId" : 2,
      "id" : 7,
      "value" : 9
    },
    "teamData" : {
      "worldChampionships" : 6,
      "polePositions" : 6,
      "firstTeamEntry" : 9,
      "profile" : "profile",
      "fullName" : "fullName",
      "powerUnit" : "powerUnit",
      "id" : 8,
      "chassis" : "chassis",
      "highestRaceFinish" : 3,
      "base" : "base"
    },
    "teamDataId" : 6,
    "name" : "name",
    "id" : 2,
    "drivers" : [ null, null ],
    "teamChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "leading" : 9,
      "rating" : 9,
      "firstName" : "firstName",
      "personDataId" : 7,
      "management" : 5,
      "teamId" : 1,
      "id" : 1,
      "strategy" : 4,
      "value" : 6
    },
    "teamColor" : "teamColor"
  },
  "adaptability" : 7,
  "aggression" : 3,
  "defendeing" : 0,
  "firstName" : "firstName",
  "personData" : {
    "country" : "country",
    "placeOfBirth" : "placeOfBirth",
    "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "biography" : "biography"
  },
  "raceNumber" : 1,
  "smoothness" : 7,
  "cornering" : 6,
  "teamId" : 5,
  "racecraft" : 4,
  "reactions" : 5,
  "aggressionId" : 3
}, {
  "lastName" : "lastName",
  "growthPotentialId" : 8,
  "isReserveDriver" : true,
  "rating" : 7,
  "accuracy" : 3,
  "growthPotential" : 7,
  "consistency" : 0,
  "personDataId" : 1,
  "id" : 0,
  "braking" : 6,
  "value" : 6,
  "worldChampionships" : 2,
  "image" : "image",
  "overtaking" : 6,
  "pace" : 6,
  "control" : 3,
  "team" : {
    "image" : "image",
    "technicalChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "aerodynamics" : 4,
      "durability" : 1,
      "rating" : 1,
      "maximumSpeed" : 7,
      "firstName" : "firstName",
      "personDataId" : 3,
      "teamId" : 2,
      "id" : 7,
      "value" : 9
    },
    "teamData" : {
      "worldChampionships" : 6,
      "polePositions" : 6,
      "firstTeamEntry" : 9,
      "profile" : "profile",
      "fullName" : "fullName",
      "powerUnit" : "powerUnit",
      "id" : 8,
      "chassis" : "chassis",
      "highestRaceFinish" : 3,
      "base" : "base"
    },
    "teamDataId" : 6,
    "name" : "name",
    "id" : 2,
    "drivers" : [ null, null ],
    "teamChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "leading" : 9,
      "rating" : 9,
      "firstName" : "firstName",
      "personDataId" : 7,
      "management" : 5,
      "teamId" : 1,
      "id" : 1,
      "strategy" : 4,
      "value" : 6
    },
    "teamColor" : "teamColor"
  },
  "adaptability" : 7,
  "aggression" : 3,
  "defendeing" : 0,
  "firstName" : "firstName",
  "personData" : {
    "country" : "country",
    "placeOfBirth" : "placeOfBirth",
    "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "biography" : "biography"
  },
  "raceNumber" : 1,
  "smoothness" : 7,
  "cornering" : 6,
  "teamId" : 5,
  "racecraft" : 4,
  "reactions" : 5,
  "aggressionId" : 3
} ]}]

     - returns: RequestBuilder<[Driver]> 
     */
    open class func apiDriversGetWithRequestBuilder() -> RequestBuilder<[Driver]> {
        let path = "/api/Drivers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Driver]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiDriversIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiDriversIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /api/Drivers/{id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiDriversIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/Drivers/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiDriversIdGet(_id: Int, completion: @escaping ((_ data: Driver?,_ error: Error?) -> Void)) {
        apiDriversIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/Drivers/{id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "lastName" : "lastName",
  "growthPotentialId" : 8,
  "isReserveDriver" : true,
  "rating" : 7,
  "accuracy" : 3,
  "growthPotential" : 7,
  "consistency" : 0,
  "personDataId" : 1,
  "id" : 0,
  "braking" : 6,
  "value" : 6,
  "worldChampionships" : 2,
  "image" : "image",
  "overtaking" : 6,
  "pace" : 6,
  "control" : 3,
  "team" : {
    "image" : "image",
    "technicalChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "aerodynamics" : 4,
      "durability" : 1,
      "rating" : 1,
      "maximumSpeed" : 7,
      "firstName" : "firstName",
      "personDataId" : 3,
      "teamId" : 2,
      "id" : 7,
      "value" : 9
    },
    "teamData" : {
      "worldChampionships" : 6,
      "polePositions" : 6,
      "firstTeamEntry" : 9,
      "profile" : "profile",
      "fullName" : "fullName",
      "powerUnit" : "powerUnit",
      "id" : 8,
      "chassis" : "chassis",
      "highestRaceFinish" : 3,
      "base" : "base"
    },
    "teamDataId" : 6,
    "name" : "name",
    "id" : 2,
    "drivers" : [ null, null ],
    "teamChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "leading" : 9,
      "rating" : 9,
      "firstName" : "firstName",
      "personDataId" : 7,
      "management" : 5,
      "teamId" : 1,
      "id" : 1,
      "strategy" : 4,
      "value" : 6
    },
    "teamColor" : "teamColor"
  },
  "adaptability" : 7,
  "aggression" : 3,
  "defendeing" : 0,
  "firstName" : "firstName",
  "personData" : {
    "country" : "country",
    "placeOfBirth" : "placeOfBirth",
    "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "biography" : "biography"
  },
  "raceNumber" : 1,
  "smoothness" : 7,
  "cornering" : 6,
  "teamId" : 5,
  "racecraft" : 4,
  "reactions" : 5,
  "aggressionId" : 3
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<Driver> 
     */
    open class func apiDriversIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<Driver> {
        var path = "/api/Drivers/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Driver>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiDriversIdPatch(_id: Int, body: UpdateDriverDto? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiDriversIdPatchWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /api/Drivers/{id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiDriversIdPatchWithRequestBuilder(_id: Int, body: UpdateDriverDto? = nil) -> RequestBuilder<Void> {
        var path = "/api/Drivers/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiDriversPost(body: CreateDriverDto? = nil, completion: @escaping ((_ data: Driver?,_ error: Error?) -> Void)) {
        apiDriversPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/Drivers
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "lastName" : "lastName",
  "growthPotentialId" : 8,
  "isReserveDriver" : true,
  "rating" : 7,
  "accuracy" : 3,
  "growthPotential" : 7,
  "consistency" : 0,
  "personDataId" : 1,
  "id" : 0,
  "braking" : 6,
  "value" : 6,
  "worldChampionships" : 2,
  "image" : "image",
  "overtaking" : 6,
  "pace" : 6,
  "control" : 3,
  "team" : {
    "image" : "image",
    "technicalChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "aerodynamics" : 4,
      "durability" : 1,
      "rating" : 1,
      "maximumSpeed" : 7,
      "firstName" : "firstName",
      "personDataId" : 3,
      "teamId" : 2,
      "id" : 7,
      "value" : 9
    },
    "teamData" : {
      "worldChampionships" : 6,
      "polePositions" : 6,
      "firstTeamEntry" : 9,
      "profile" : "profile",
      "fullName" : "fullName",
      "powerUnit" : "powerUnit",
      "id" : 8,
      "chassis" : "chassis",
      "highestRaceFinish" : 3,
      "base" : "base"
    },
    "teamDataId" : 6,
    "name" : "name",
    "id" : 2,
    "drivers" : [ null, null ],
    "teamChief" : {
      "lastName" : "lastName",
      "image" : "image",
      "leading" : 9,
      "rating" : 9,
      "firstName" : "firstName",
      "personDataId" : 7,
      "management" : 5,
      "teamId" : 1,
      "id" : 1,
      "strategy" : 4,
      "value" : 6
    },
    "teamColor" : "teamColor"
  },
  "adaptability" : 7,
  "aggression" : 3,
  "defendeing" : 0,
  "firstName" : "firstName",
  "personData" : {
    "country" : "country",
    "placeOfBirth" : "placeOfBirth",
    "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "biography" : "biography"
  },
  "raceNumber" : 1,
  "smoothness" : 7,
  "cornering" : 6,
  "teamId" : 5,
  "racecraft" : 4,
  "reactions" : 5,
  "aggressionId" : 3
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Driver> 
     */
    open class func apiDriversPostWithRequestBuilder(body: CreateDriverDto? = nil) -> RequestBuilder<Driver> {
        let path = "/api/Drivers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Driver>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
