//
// PlayerTeamsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PlayerTeamsAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsGet(completion: @escaping ((_ data: [PlayerTeam]?,_ error: Error?) -> Void)) {
        apiPlayerTeamsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/PlayerTeams
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
}, {
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
} ]}]

     - returns: RequestBuilder<[PlayerTeam]> 
     */
    open class func apiPlayerTeamsGetWithRequestBuilder() -> RequestBuilder<[PlayerTeam]> {
        let path = "/api/PlayerTeams"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[PlayerTeam]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter userId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsGetTeamsByUserGet(userId: String? = nil, completion: @escaping ((_ data: [PlayerTeam]?,_ error: Error?) -> Void)) {
        apiPlayerTeamsGetTeamsByUserGetWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/PlayerTeams/GetTeamsByUser
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
}, {
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
} ]}]
     - parameter userId: (query)  (optional)

     - returns: RequestBuilder<[PlayerTeam]> 
     */
    open class func apiPlayerTeamsGetTeamsByUserGetWithRequestBuilder(userId: String? = nil) -> RequestBuilder<[PlayerTeam]> {
        let path = "/api/PlayerTeams/GetTeamsByUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "userId": userId
        ])


        let requestBuilder: RequestBuilder<[PlayerTeam]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter driverNumber: (path)  
     - parameter driverId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsIdBuyDriverDriverNumberPatch(_id: Int, driverNumber: Int, driverId: Int? = nil, completion: @escaping ((_ data: PlayerTeam?,_ error: Error?) -> Void)) {
        apiPlayerTeamsIdBuyDriverDriverNumberPatchWithRequestBuilder(_id: _id, driverNumber: driverNumber, driverId: driverId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /api/PlayerTeams/{id}/buy/driver/{driverNumber}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
}}]
     - parameter _id: (path)  
     - parameter driverNumber: (path)  
     - parameter driverId: (query)  (optional)

     - returns: RequestBuilder<PlayerTeam> 
     */
    open class func apiPlayerTeamsIdBuyDriverDriverNumberPatchWithRequestBuilder(_id: Int, driverNumber: Int, driverId: Int? = nil) -> RequestBuilder<PlayerTeam> {
        var path = "/api/PlayerTeams/{id}/buy/driver/{driverNumber}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let driverNumberPreEscape = "\(driverNumber)"
        let driverNumberPostEscape = driverNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driverNumber}", with: driverNumberPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "driverId": driverId?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<PlayerTeam>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter teamChiefId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsIdBuyTeamchiefPatch(_id: Int, teamChiefId: Int? = nil, completion: @escaping ((_ data: PlayerTeam?,_ error: Error?) -> Void)) {
        apiPlayerTeamsIdBuyTeamchiefPatchWithRequestBuilder(_id: _id, teamChiefId: teamChiefId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /api/PlayerTeams/{id}/buy/teamchief
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
}}]
     - parameter _id: (path)  
     - parameter teamChiefId: (query)  (optional)

     - returns: RequestBuilder<PlayerTeam> 
     */
    open class func apiPlayerTeamsIdBuyTeamchiefPatchWithRequestBuilder(_id: Int, teamChiefId: Int? = nil) -> RequestBuilder<PlayerTeam> {
        var path = "/api/PlayerTeams/{id}/buy/teamchief"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "teamChiefId": teamChiefId?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<PlayerTeam>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter technicalChiefId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsIdBuyTechnicalchiefPatch(_id: Int, technicalChiefId: Int? = nil, completion: @escaping ((_ data: PlayerTeam?,_ error: Error?) -> Void)) {
        apiPlayerTeamsIdBuyTechnicalchiefPatchWithRequestBuilder(_id: _id, technicalChiefId: technicalChiefId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /api/PlayerTeams/{id}/buy/technicalchief
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
}}]
     - parameter _id: (path)  
     - parameter technicalChiefId: (query)  (optional)

     - returns: RequestBuilder<PlayerTeam> 
     */
    open class func apiPlayerTeamsIdBuyTechnicalchiefPatchWithRequestBuilder(_id: Int, technicalChiefId: Int? = nil) -> RequestBuilder<PlayerTeam> {
        var path = "/api/PlayerTeams/{id}/buy/technicalchief"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "technicalChiefId": technicalChiefId?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<PlayerTeam>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiPlayerTeamsIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /api/PlayerTeams/{id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiPlayerTeamsIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/PlayerTeams/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsIdGet(_id: Int, completion: @escaping ((_ data: PlayerTeam?,_ error: Error?) -> Void)) {
        apiPlayerTeamsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/PlayerTeams/{id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<PlayerTeam> 
     */
    open class func apiPlayerTeamsIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<PlayerTeam> {
        var path = "/api/PlayerTeams/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PlayerTeam>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsIdPatch(_id: Int, body: UpdatePlayerTeamDto? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiPlayerTeamsIdPatchWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /api/PlayerTeams/{id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiPlayerTeamsIdPatchWithRequestBuilder(_id: Int, body: UpdatePlayerTeamDto? = nil) -> RequestBuilder<Void> {
        var path = "/api/PlayerTeams/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path)  
     - parameter driverNumber: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsIdSellDriverDriverNumberPatch(_id: Int, driverNumber: Int, completion: @escaping ((_ data: PlayerTeam?,_ error: Error?) -> Void)) {
        apiPlayerTeamsIdSellDriverDriverNumberPatchWithRequestBuilder(_id: _id, driverNumber: driverNumber).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /api/PlayerTeams/{id}/sell/driver/{driverNumber}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
}}]
     - parameter _id: (path)  
     - parameter driverNumber: (path)  

     - returns: RequestBuilder<PlayerTeam> 
     */
    open class func apiPlayerTeamsIdSellDriverDriverNumberPatchWithRequestBuilder(_id: Int, driverNumber: Int) -> RequestBuilder<PlayerTeam> {
        var path = "/api/PlayerTeams/{id}/sell/driver/{driverNumber}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let driverNumberPreEscape = "\(driverNumber)"
        let driverNumberPostEscape = driverNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{driverNumber}", with: driverNumberPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PlayerTeam>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsIdSellTeamchiefPatch(_id: Int, completion: @escaping ((_ data: PlayerTeam?,_ error: Error?) -> Void)) {
        apiPlayerTeamsIdSellTeamchiefPatchWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /api/PlayerTeams/{id}/sell/teamchief
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<PlayerTeam> 
     */
    open class func apiPlayerTeamsIdSellTeamchiefPatchWithRequestBuilder(_id: Int) -> RequestBuilder<PlayerTeam> {
        var path = "/api/PlayerTeams/{id}/sell/teamchief"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PlayerTeam>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsIdSellTechnicalchiefPatch(_id: Int, completion: @escaping ((_ data: PlayerTeam?,_ error: Error?) -> Void)) {
        apiPlayerTeamsIdSellTechnicalchiefPatchWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /api/PlayerTeams/{id}/sell/technicalchief
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<PlayerTeam> 
     */
    open class func apiPlayerTeamsIdSellTechnicalchiefPatchWithRequestBuilder(_id: Int) -> RequestBuilder<PlayerTeam> {
        var path = "/api/PlayerTeams/{id}/sell/technicalchief"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PlayerTeam>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiPlayerTeamsPost(body: CreatePlayerTeamDto? = nil, completion: @escaping ((_ data: PlayerTeam?,_ error: Error?) -> Void)) {
        apiPlayerTeamsPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/PlayerTeams
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "teamName" : "teamName",
  "technicalChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "aerodynamics" : 4,
    "durability" : 1,
    "rating" : 1,
    "maximumSpeed" : 7,
    "firstName" : "firstName",
    "personDataId" : 3,
    "teamId" : 2,
    "id" : 7,
    "value" : 9
  },
  "driverTwoId" : 9,
  "leagues" : [ null, null ],
  "driverOneId" : 7,
  "playerTeamLeagues" : [ null, null ],
  "technicalChiefId" : 2,
  "apiUserId" : "apiUserId",
  "driverOne" : {
    "lastName" : "lastName",
    "growthPotentialId" : 8,
    "isReserveDriver" : true,
    "rating" : 7,
    "accuracy" : 3,
    "growthPotential" : 7,
    "consistency" : 0,
    "personDataId" : 1,
    "id" : 0,
    "braking" : 6,
    "value" : 6,
    "worldChampionships" : 2,
    "image" : "image",
    "overtaking" : 6,
    "pace" : 6,
    "control" : 3,
    "team" : {
      "image" : "image",
      "technicalChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "aerodynamics" : 4,
        "durability" : 1,
        "rating" : 1,
        "maximumSpeed" : 7,
        "firstName" : "firstName",
        "personDataId" : 3,
        "teamId" : 2,
        "id" : 7,
        "value" : 9
      },
      "teamData" : {
        "worldChampionships" : 6,
        "polePositions" : 6,
        "firstTeamEntry" : 9,
        "profile" : "profile",
        "fullName" : "fullName",
        "powerUnit" : "powerUnit",
        "id" : 8,
        "chassis" : "chassis",
        "highestRaceFinish" : 3,
        "base" : "base"
      },
      "teamDataId" : 6,
      "name" : "name",
      "id" : 2,
      "drivers" : [ null, null ],
      "teamChief" : {
        "lastName" : "lastName",
        "image" : "image",
        "leading" : 9,
        "rating" : 9,
        "firstName" : "firstName",
        "personDataId" : 7,
        "management" : 5,
        "teamId" : 1,
        "id" : 1,
        "strategy" : 4,
        "value" : 6
      },
      "teamColor" : "teamColor"
    },
    "adaptability" : 7,
    "aggression" : 3,
    "defendeing" : 0,
    "firstName" : "firstName",
    "personData" : {
      "country" : "country",
      "placeOfBirth" : "placeOfBirth",
      "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
      "id" : 5,
      "biography" : "biography"
    },
    "raceNumber" : 1,
    "smoothness" : 7,
    "cornering" : 6,
    "teamId" : 5,
    "racecraft" : 4,
    "reactions" : 5,
    "aggressionId" : 3
  },
  "teamChiefId" : 3,
  "id" : 5,
  "collectedPoints" : 2,
  "teamChief" : {
    "lastName" : "lastName",
    "image" : "image",
    "leading" : 9,
    "rating" : 9,
    "firstName" : "firstName",
    "personDataId" : 7,
    "management" : 5,
    "teamId" : 1,
    "id" : 1,
    "strategy" : 4,
    "value" : 6
  },
  "budget" : 5
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<PlayerTeam> 
     */
    open class func apiPlayerTeamsPostWithRequestBuilder(body: CreatePlayerTeamDto? = nil) -> RequestBuilder<PlayerTeam> {
        let path = "/api/PlayerTeams"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PlayerTeam>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
