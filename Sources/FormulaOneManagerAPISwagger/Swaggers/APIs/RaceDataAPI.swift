//
// RaceDataAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class RaceDataAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiRaceDataGet(completion: @escaping ((_ data: [RaceData]?,_ error: Error?) -> Void)) {
        apiRaceDataGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/RaceData
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "circuitLength" : 5,
  "country" : "country",
  "raceDistance" : 5.637376656633329,
  "numberOfLaps" : 1,
  "firstGrandPrix" : 6,
  "fullName" : "fullName",
  "description" : "description",
  "lapRecord" : "lapRecord",
  "id" : 0,
  "trackName" : "trackName"
}, {
  "circuitLength" : 5,
  "country" : "country",
  "raceDistance" : 5.637376656633329,
  "numberOfLaps" : 1,
  "firstGrandPrix" : 6,
  "fullName" : "fullName",
  "description" : "description",
  "lapRecord" : "lapRecord",
  "id" : 0,
  "trackName" : "trackName"
} ]}]

     - returns: RequestBuilder<[RaceData]> 
     */
    open class func apiRaceDataGetWithRequestBuilder() -> RequestBuilder<[RaceData]> {
        let path = "/api/RaceData"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[RaceData]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiRaceDataIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiRaceDataIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /api/RaceData/{id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiRaceDataIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/RaceData/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiRaceDataIdGet(_id: Int, completion: @escaping ((_ data: RaceData?,_ error: Error?) -> Void)) {
        apiRaceDataIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/RaceData/{id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "circuitLength" : 5,
  "country" : "country",
  "raceDistance" : 5.637376656633329,
  "numberOfLaps" : 1,
  "firstGrandPrix" : 6,
  "fullName" : "fullName",
  "description" : "description",
  "lapRecord" : "lapRecord",
  "id" : 0,
  "trackName" : "trackName"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<RaceData> 
     */
    open class func apiRaceDataIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<RaceData> {
        var path = "/api/RaceData/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RaceData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiRaceDataIdPatch(_id: Int, body: UpdateRaceDataDto? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiRaceDataIdPatchWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /api/RaceData/{id}
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiRaceDataIdPatchWithRequestBuilder(_id: Int, body: UpdateRaceDataDto? = nil) -> RequestBuilder<Void> {
        var path = "/api/RaceData/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiRaceDataPost(body: CreateRaceDataDto? = nil, completion: @escaping ((_ data: RaceData?,_ error: Error?) -> Void)) {
        apiRaceDataPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/RaceData
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "circuitLength" : 5,
  "country" : "country",
  "raceDistance" : 5.637376656633329,
  "numberOfLaps" : 1,
  "firstGrandPrix" : 6,
  "fullName" : "fullName",
  "description" : "description",
  "lapRecord" : "lapRecord",
  "id" : 0,
  "trackName" : "trackName"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<RaceData> 
     */
    open class func apiRaceDataPostWithRequestBuilder(body: CreateRaceDataDto? = nil) -> RequestBuilder<RaceData> {
        let path = "/api/RaceData"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RaceData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
